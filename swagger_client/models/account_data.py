# coding: utf-8

"""
    Buxfer API

    Buxfer API based on their website.  -----------  Attention! --------------  THIS IS NOT AN OFFICIAL BUXFER.COM API  ----------- Attention! --------------  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: robbiegal@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'bank': 'str',
        'balance': 'float',
        'currency': 'str',
        'last_updated': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'bank': 'bank',
        'balance': 'balance',
        'currency': 'currency',
        'last_updated': 'lastUpdated'
    }

    def __init__(self, id=None, name=None, bank=None, balance=None, currency=None, last_updated=None):  # noqa: E501
        """AccountData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._bank = None
        self._balance = None
        self._currency = None
        self._last_updated = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if bank is not None:
            self.bank = bank
        if balance is not None:
            self.balance = balance
        if currency is not None:
            self.currency = currency
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def id(self):
        """Gets the id of this AccountData.  # noqa: E501


        :return: The id of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountData.


        :param id: The id of this AccountData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountData.  # noqa: E501


        :return: The name of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountData.


        :param name: The name of this AccountData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def bank(self):
        """Gets the bank of this AccountData.  # noqa: E501


        :return: The bank of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this AccountData.


        :param bank: The bank of this AccountData.  # noqa: E501
        :type: str
        """

        self._bank = bank

    @property
    def balance(self):
        """Gets the balance of this AccountData.  # noqa: E501


        :return: The balance of this AccountData.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountData.


        :param balance: The balance of this AccountData.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def currency(self):
        """Gets the currency of this AccountData.  # noqa: E501


        :return: The currency of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountData.


        :param currency: The currency of this AccountData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def last_updated(self):
        """Gets the last_updated of this AccountData.  # noqa: E501


        :return: The last_updated of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AccountData.


        :param last_updated: The last_updated of this AccountData.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
