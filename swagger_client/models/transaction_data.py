# coding: utf-8

"""
    Buxfer API

    Buxfer API based on their website.  -----------  Attention! --------------  THIS IS NOT AN OFFICIAL BUXFER.COM API  ----------- Attention! --------------  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: robbiegal@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        '_date': 'str',
        'type': 'str',
        'amount': 'float',
        'expense_amount': 'float',
        'account_id': 'str',
        'account_name': 'str',
        'from_account': 'list[AccountData]',
        'to_account': 'list[AccountData]',
        'tags': 'list[TagData]',
        'tag_names': 'list[str]',
        'status': 'str',
        'is_future_dated': 'bool',
        'is_pending': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        '_date': 'date',
        'type': 'type',
        'amount': 'amount',
        'expense_amount': 'expenseAmount',
        'account_id': 'accountId',
        'account_name': 'accountName',
        'from_account': 'fromAccount',
        'to_account': 'toAccount',
        'tags': 'tags',
        'tag_names': 'tagNames',
        'status': 'status',
        'is_future_dated': 'isFutureDated',
        'is_pending': 'isPending'
    }

    def __init__(self, id=None, description=None, _date=None, type=None, amount=None, expense_amount=None, account_id=None, account_name=None, from_account=None, to_account=None, tags=None, tag_names=None, status=None, is_future_dated=None, is_pending=None):  # noqa: E501
        """TransactionData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self.__date = None
        self._type = None
        self._amount = None
        self._expense_amount = None
        self._account_id = None
        self._account_name = None
        self._from_account = None
        self._to_account = None
        self._tags = None
        self._tag_names = None
        self._status = None
        self._is_future_dated = None
        self._is_pending = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if _date is not None:
            self._date = _date
        if type is not None:
            self.type = type
        if amount is not None:
            self.amount = amount
        if expense_amount is not None:
            self.expense_amount = expense_amount
        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if from_account is not None:
            self.from_account = from_account
        if to_account is not None:
            self.to_account = to_account
        if tags is not None:
            self.tags = tags
        if tag_names is not None:
            self.tag_names = tag_names
        if status is not None:
            self.status = status
        if is_future_dated is not None:
            self.is_future_dated = is_future_dated
        if is_pending is not None:
            self.is_pending = is_pending

    @property
    def id(self):
        """Gets the id of this TransactionData.  # noqa: E501


        :return: The id of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionData.


        :param id: The id of this TransactionData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this TransactionData.  # noqa: E501


        :return: The description of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransactionData.


        :param description: The description of this TransactionData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def _date(self):
        """Gets the _date of this TransactionData.  # noqa: E501


        :return: The _date of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TransactionData.


        :param _date: The _date of this TransactionData.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def type(self):
        """Gets the type of this TransactionData.  # noqa: E501


        :return: The type of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionData.


        :param type: The type of this TransactionData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this TransactionData.  # noqa: E501


        :return: The amount of this TransactionData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionData.


        :param amount: The amount of this TransactionData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def expense_amount(self):
        """Gets the expense_amount of this TransactionData.  # noqa: E501


        :return: The expense_amount of this TransactionData.  # noqa: E501
        :rtype: float
        """
        return self._expense_amount

    @expense_amount.setter
    def expense_amount(self, expense_amount):
        """Sets the expense_amount of this TransactionData.


        :param expense_amount: The expense_amount of this TransactionData.  # noqa: E501
        :type: float
        """

        self._expense_amount = expense_amount

    @property
    def account_id(self):
        """Gets the account_id of this TransactionData.  # noqa: E501


        :return: The account_id of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TransactionData.


        :param account_id: The account_id of this TransactionData.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this TransactionData.  # noqa: E501


        :return: The account_name of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this TransactionData.


        :param account_name: The account_name of this TransactionData.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def from_account(self):
        """Gets the from_account of this TransactionData.  # noqa: E501


        :return: The from_account of this TransactionData.  # noqa: E501
        :rtype: list[AccountData]
        """
        return self._from_account

    @from_account.setter
    def from_account(self, from_account):
        """Sets the from_account of this TransactionData.


        :param from_account: The from_account of this TransactionData.  # noqa: E501
        :type: list[AccountData]
        """

        self._from_account = from_account

    @property
    def to_account(self):
        """Gets the to_account of this TransactionData.  # noqa: E501


        :return: The to_account of this TransactionData.  # noqa: E501
        :rtype: list[AccountData]
        """
        return self._to_account

    @to_account.setter
    def to_account(self, to_account):
        """Sets the to_account of this TransactionData.


        :param to_account: The to_account of this TransactionData.  # noqa: E501
        :type: list[AccountData]
        """

        self._to_account = to_account

    @property
    def tags(self):
        """Gets the tags of this TransactionData.  # noqa: E501


        :return: The tags of this TransactionData.  # noqa: E501
        :rtype: list[TagData]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TransactionData.


        :param tags: The tags of this TransactionData.  # noqa: E501
        :type: list[TagData]
        """

        self._tags = tags

    @property
    def tag_names(self):
        """Gets the tag_names of this TransactionData.  # noqa: E501


        :return: The tag_names of this TransactionData.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names):
        """Sets the tag_names of this TransactionData.


        :param tag_names: The tag_names of this TransactionData.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def status(self):
        """Gets the status of this TransactionData.  # noqa: E501


        :return: The status of this TransactionData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransactionData.


        :param status: The status of this TransactionData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def is_future_dated(self):
        """Gets the is_future_dated of this TransactionData.  # noqa: E501


        :return: The is_future_dated of this TransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._is_future_dated

    @is_future_dated.setter
    def is_future_dated(self, is_future_dated):
        """Sets the is_future_dated of this TransactionData.


        :param is_future_dated: The is_future_dated of this TransactionData.  # noqa: E501
        :type: bool
        """

        self._is_future_dated = is_future_dated

    @property
    def is_pending(self):
        """Gets the is_pending of this TransactionData.  # noqa: E501


        :return: The is_pending of this TransactionData.  # noqa: E501
        :rtype: bool
        """
        return self._is_pending

    @is_pending.setter
    def is_pending(self, is_pending):
        """Sets the is_pending of this TransactionData.


        :param is_pending: The is_pending of this TransactionData.  # noqa: E501
        :type: bool
        """

        self._is_pending = is_pending

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
