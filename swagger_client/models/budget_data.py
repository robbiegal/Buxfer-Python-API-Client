# coding: utf-8

"""
    Buxfer API

    Buxfer API based on their website.  -----------  Attention! --------------  THIS IS NOT AN OFFICIAL BUXFER.COM API  ----------- Attention! --------------  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: robbiegal@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BudgetData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'limit': 'str',
        'remaining': 'float',
        'period': 'str',
        'current_period': 'str',
        'tags': 'list[str]',
        'keywords': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'limit': 'limit',
        'remaining': 'remaining',
        'period': 'period',
        'current_period': 'currentPeriod',
        'tags': 'tags',
        'keywords': 'keywords'
    }

    def __init__(self, id=None, name=None, limit=None, remaining=None, period=None, current_period=None, tags=None, keywords=None):  # noqa: E501
        """BudgetData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._limit = None
        self._remaining = None
        self._period = None
        self._current_period = None
        self._tags = None
        self._keywords = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if limit is not None:
            self.limit = limit
        if remaining is not None:
            self.remaining = remaining
        if period is not None:
            self.period = period
        if current_period is not None:
            self.current_period = current_period
        if tags is not None:
            self.tags = tags
        if keywords is not None:
            self.keywords = keywords

    @property
    def id(self):
        """Gets the id of this BudgetData.  # noqa: E501


        :return: The id of this BudgetData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BudgetData.


        :param id: The id of this BudgetData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BudgetData.  # noqa: E501


        :return: The name of this BudgetData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BudgetData.


        :param name: The name of this BudgetData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def limit(self):
        """Gets the limit of this BudgetData.  # noqa: E501


        :return: The limit of this BudgetData.  # noqa: E501
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this BudgetData.


        :param limit: The limit of this BudgetData.  # noqa: E501
        :type: str
        """

        self._limit = limit

    @property
    def remaining(self):
        """Gets the remaining of this BudgetData.  # noqa: E501


        :return: The remaining of this BudgetData.  # noqa: E501
        :rtype: float
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this BudgetData.


        :param remaining: The remaining of this BudgetData.  # noqa: E501
        :type: float
        """

        self._remaining = remaining

    @property
    def period(self):
        """Gets the period of this BudgetData.  # noqa: E501


        :return: The period of this BudgetData.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this BudgetData.


        :param period: The period of this BudgetData.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def current_period(self):
        """Gets the current_period of this BudgetData.  # noqa: E501


        :return: The current_period of this BudgetData.  # noqa: E501
        :rtype: str
        """
        return self._current_period

    @current_period.setter
    def current_period(self, current_period):
        """Sets the current_period of this BudgetData.


        :param current_period: The current_period of this BudgetData.  # noqa: E501
        :type: str
        """

        self._current_period = current_period

    @property
    def tags(self):
        """Gets the tags of this BudgetData.  # noqa: E501


        :return: The tags of this BudgetData.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BudgetData.


        :param tags: The tags of this BudgetData.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def keywords(self):
        """Gets the keywords of this BudgetData.  # noqa: E501


        :return: The keywords of this BudgetData.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this BudgetData.


        :param keywords: The keywords of this BudgetData.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
